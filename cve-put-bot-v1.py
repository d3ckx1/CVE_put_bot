import requests
from dingtalkchatbot.chatbot import DingtalkChatbot
import time
from googletrans import Translator
import sqlite3


# 你的钉机器人的Webhook地址
webhook_url = 'https://oapi.dingtalk.com/robot/send?access_token=xxxxxxxxxx'
secret = 'SECdxxxxxxxxxxx'
# 初始化钉钉机器人
ding_bot = DingtalkChatbot(webhook_url, secret=secret)

# 初始化中文翻译器
translator = Translator()

# 连接SQLite数据库
conn = sqlite3.connect('pushed_cve.db')
cursor = conn.cursor()

# 创建表，如果不存在
cursor.execute('''
    CREATE TABLE IF NOT EXISTS pushed_cve (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        cve_id TEXT NOT NULL
    )
''')
conn.commit()

def get_latest_cve():
    """
    获取最新的CVE漏洞信息
    """
    misp_cve_url = 'http://cve.circl.lu/api/last'

    try:
        response = requests.get(misp_cve_url)
        if response.status_code == 200:
            data = response.json()

            if data and isinstance(data, list) and len(data) > 0:
                latest_cve_item = data[0]
                cve_id = latest_cve_item.get('id', 'N/A')

                # 判断是否已经推送过
                if cve_id in get_pushed_cves():
                    return None

                # 如果没推送过，记录到数据库
                record_pushed_cve(cve_id)

                cve_description = latest_cve_item.get('summary', 'N/A')
                cve_published = latest_cve_item.get('Published', 'N/A')

                # 获取漏洞评分
                cvss_score = 'N/A'
                if latest_cve_item and 'cvss' in latest_cve_item and latest_cve_item['cvss'] is not None:
                    cvss_score = latest_cve_item['cvss'].get('score', 'N/A')


                # 获取受影响的产品
                vulnerable_products = []
                if latest_cve_item and 'vulnerable_configuration' in latest_cve_item:
                    vulnerable_configurations = latest_cve_item['vulnerable_configuration']
                    for config in vulnerable_configurations:
                        vulnerable_products.append(config)


                # 获取references
                references = latest_cve_item.get('references', [])

                # 中文翻译
                translated_description = translator.translate(cve_description, src='en', dest='zh-cn').text

                return {
                    'cve_id': cve_id,
                    'description': cve_description,
                    'translated_description': translated_description,
                    'published': cve_published,
                    'cvss_score': cvss_score,
                    'vulnerable_products': vulnerable_products,
                    'references': references
                }
            return None
    except requests.exceptions.HTTPError as errh:
        print("HTTP Error:", errh)
    except requests.exceptions.ConnectionError as errc:
        print("Error Connecting:", errc)
    except requests.exceptions.Timeout as errt:
        print("Timeout Error:", errt)
    except requests.exceptions.RequestException as err:
        print("OOps: Something Else", err)

def record_pushed_cve(cve_id):
    """
    记录已推送的CVE到数据库
    """
    cursor.execute('INSERT INTO pushed_cve (cve_id) VALUES (?)', (cve_id,))
    conn.commit()

def get_pushed_cves():
    """
    获取已推送的CVE列表
    """
    cursor.execute('SELECT cve_id FROM pushed_cve')
    rows = cursor.fetchall()
    return [row[0] for row in rows]

# 设置定时执行任务
banner = '''

       ___         __     ___       _____ _           _   
      / __\/\   /\/__\   / _ \/\ /\/__   \ |__   ___ | |_ 
     / /   \ \ / /_\    / /_)/ / \ \ / /\/ '_ \ / _ \| __|
    / /___  \ V //__   / ___/\ \_/ // /  | |_) | (_) | |_ 
    \____/   \_/\__/___\/     \___/ \/___|_.__/ \___/ \__|
                  |_____|           |_____|               
                
                程序循环自动20分钟进行一次监测！
'''
print(banner)

def job():
    # 获取最新的CVE漏洞信息
    latest_cve_info = get_latest_cve()

    if latest_cve_info:
        # 提取漏洞信息
        cve_id = latest_cve_info['cve_id']
        cve_description = latest_cve_info['description']
        FY_description = latest_cve_info['translated_description']
        cve_published = latest_cve_info['published']
        cvss_score = latest_cve_info['cvss_score']
        vulnerable_products = latest_cve_info['vulnerable_products']
        references = latest_cve_info['references']

        # 构建消息
        message = f" [**] 发现最新的CVE漏洞 [**] ：\nID: {cve_id}\n原文描述: {cve_description}\n自动翻译描述: {FY_description}\n发布日期: {cve_published}\nCVSS评分: {cvss_score}\n受影响的产品: {vulnerable_products}\n参考来源: {references}"
        print(f"[v] 发现最新的CVE漏洞，ID: {cve_id} ")
        # 推送消息到钉钉机器人
        ding_bot.send_text(msg=message)
        print("[v] 钉钉机器人推送成功！")
    else:
        print("[x] 没有获取最新的CVE漏洞信息")

# 设置每5分钟执行一次任务
while True:
    job()
    time.sleep(300)
